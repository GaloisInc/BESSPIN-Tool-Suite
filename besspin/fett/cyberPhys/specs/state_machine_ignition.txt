@startuml
state "Ignition start up" as IgnitionUp
IgnitionUp: Start BeamNG
IgnitionUp: Load Device Drivers
IgnitionUp: Connect to FadeCandy boards
[*] --> IgnitionUp: SimPC powered up

IgnitionUp --> IgnitionLedInitFailed: FadeCandy init failed
state "Non-critical components failed" as IgnitionLedInitFailed
IgnitionLedInitFailed: LED init failed
IgnitionLedInitFailed: Log error and continue

IgnitionLedInitFailed --> IgnitionReady: Send CMD_COMPONENT_ERROR(FADECANDY|NONCRITICAL)\nSend CMD_COMPONENT_READY(IGNITION)

IgnitionUp -[#blue]-> IgnitionReady: Success\nSend CMD_COMPONENT_READY(IGNITION)
note left of IgnitionReady: Periodically\nsend CMD_COMPONENT_READY(IGNITION)
state "Ignition Ready" as IgnitionReady
IgnitionReady: BeamNG up
IgnitionReady: HUD/Dashboard up
IgnitionReady: Steering wheel up
IgnitionReady: CAN_mux up

state "Is in self-drive mode?" as IsInSelfDriveMode
IgnitionReady -[#red]-> IsInSelfDriveMode: No C&C msg received within Timeout
IsInSelfDriveMode: Demo mode check
IsInSelfDriveMode -[#red]-> SwitchToSelfDrive: No
state "Switch to self-drive mode" as SwitchToSelfDrive
SwitchToSelfDrive -[#red]-> RestartScenario1
SwitchToSelfDrive: Demo mode switch
RestartScenario1 -[#red]-> IgnitionReady: Restart all timeouts
IsInSelfDriveMode -[#red]-> IgnitionReady: Yes\nReset C&C timeout
IgnitionReady -[#red]-> ScenarioTimeout: Scenario timeout expired
ScenarioTimeout -[#red]-> RestartScenario1
ScenarioTimeout: scenario ran too long

state "Restart Scenario" as RestartScenario1
RestartScenario1: in demo mode start immediatelt\n(no Enter is needed)

IgnitionReady -[#blue]-> ProcessCacMsg: Received C&C message
state "Process C&C Message" as ProcessCacMsg

state "C&C Message Processed" as CacMsgProcessed

CacMsgProcessed -[#blue]-> IgnitionReady

'state "Switch demo mode" as SwitchDemoMode
'ProcessCacMsg -[#blue]-> SwitchDemoMode: Rx CMD_SET_DRIVING_MODE(MODE_ID)
'SwitchDemoMode: set mode to MODE_ID
'SwitchDemoMode -[#blue]-> CacMsgProcessed: Driving mode updated

state "Switch CAN network" as SwitchCanNetwork
ProcessCacMsg -[#blue]-> SwitchCanNetwork: Rx CMD_ACTIVE_SCENARIO(SCENARIO_ID)
SwitchCanNetwork: Decides which ECU/Infotainment server are active
' SwitchCanNetwork --> IgnitionTerminate: CAN switch failed
SwitchCanNetwork -[#blue]-> CacMsgProcessed: Active CAN selected

ProcessCacMsg -[#blue]-> ChangeLedSequence: Rx CMD_HACK_ACTIVE(HACK_ID)
state "Change LED sequence" as ChangeLedSequence
ChangeLedSequence: change LED sequence through LED manager

ChangeLedSequence -[#blue]-> CacMsgProcessed: LED sequence changed

ProcessCacMsg -[#blue]-> RestartScenario: Rx CMD_RESTART(BEAM_NG_SCENARIO)
state "Restart Scenario" as RestartScenario
RestartScenario: in demo mode start immediatelt\n(no Enter is needed)
RestartScenario -[#blue]-> CacMsgProcessed: Scenario restarted
'RestartScenario --> IgnitionTerminate: Restart failed

' CAN messages
note top of ProcessCanMsg : How to handle hacking in demo mode?
state "Process CAN message" as ProcessCanMsg
IgnitionReady -[#green]-> ProcessCanMsg: Received CAN message
CanMsgProcessed -[#green]-> IgnitionReady

state "Infotainment Button Pressed" as InfotainmentButtonPressed
ProcessCanMsg -[#green,dashed]-> InfotainmentButtonPressed: Rx BUTTON_PRESSED\n(Thin Client Network)

state TestDemoMode <<choice>>
InfotainmentButtonPressed -[#green]-> TestDemoMode: In demo mode?
TestDemoMode -[#green]-> Wakeup: Yes
state "Wake Up" as Wakeup
Wakeup -[#red]-> RestartScenario1: Switch to manual mode\nand restart scenario
Wakeup: switch to manual driving mode
TestDemoMode -[#green]-> ForwardMessage: No
state "Forward Message" as ForwardMessage

ForwardMessage -[#green]-> CanMsgProcessed: Forward BUTTON_PRESSED msg\nto all Infotainment servers
InfotainmentButtonPressed: NOTE: Always

state "Infotainment State Updated" as InfotainmentStateUpdated
ProcessCanMsg -[#green]-> InfotainmentStateUpdated: Rx INFOTAINMENT_STATE
InfotainmentStateUpdated -[#green,dashed]-> CanMsgProcessed: Forward INFOTAINMENT_STATE msg\nto Thin Client\n(Thin Client Network)
InfotainmentStateUpdated: NOTE: Always


state "Update Gear value" as UpdateGear
ProcessCanMsg -[#green]-> UpdateGear: Rx GEAR
UpdateGear -[#green]-> CanMsgProcessed: Gear value updated
UpdateGear: NOTE: Only in manual mode

state "Update Throttle input" as ThrottleInput
ProcessCanMsg -[#green]-> ThrottleInput: Rx THROTTLE_INPUT
ThrottleInput -[#green]-> CanMsgProcessed: Throttle value updated
ThrottleInput: NOTE: Only in manual mode

state "Update Brake input" as BrakeInput
ProcessCanMsg -[#green]-> BrakeInput: Rx BRAKE_INPUT
BrakeInput -[#green]-> CanMsgProcessed: Brake value updated
BrakeInput: NOTE: Only in manual mode

state "Update Steering input" as SteeringInput
SteeringInput: LKAS
ProcessCanMsg -[#green]-> SteeringInput: Rx STEERING_INPUT
SteeringInput -[#green]-> CanMsgProcessed: Steering value updated
SteeringInput: NOTE: Only in manual mode

IgnitionUp --> IgnitionTerminate: Startup Failed\n

state "Ignition terminate" as IgnitionTerminate
IgnitionTerminate: Orderly shutdown

IgnitionReady -> IgnitionTerminate: Sub-Component failed

IgnitionTerminate -> [*]: Send CMD_COMPONENT_ERROR(IGNITION|TERMINATED)

@enduml
