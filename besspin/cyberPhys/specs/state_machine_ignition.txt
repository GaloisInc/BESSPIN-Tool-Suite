@startuml
state "Ignition start up" as IgnitionUp
IgnitionUp: Start BeamNG
IgnitionUp: Start components
IgnitionUp: Connect to FadeCandy boards
IgnitionUp: Start in FUNCTIONALITY_MINIMAL
[*] --> IgnitionUp: SimPC powered up

IgnitionUp --> IgnitionNonCriticalFailed: A non-critical component failed
state "Non-critical components failed" as IgnitionNonCriticalFailed
IgnitionNonCriticalFailed: Activity monitor failed
IgnitionNonCriticalFailed --> IgnitionReady: Send\nCMD_COMPONENT_ERROR(COMPONENT_ID|NONCRITICAL)

IgnitionUp --> IgnitionReady: Success
state "Ignition Ready" as IgnitionReady
IgnitionReady: Components running

IgnitionUp --> IgnitionTerminate: Startup Failed\n

state "Ignition terminate" as IgnitionTerminate
IgnitionTerminate: Orderly shutdown


IgnitionReady --> HealthCheck: Check system health
state "System Health Check" as HealthCheck {
    HealthCheckStart --> BaseSystemsHealthy
    note right of HealthCheckStart: Select required components based on ACTIVE_SCENARIO?
    note top of HealthCheckStart: How to handle component resets?

    state "Base systems healthy" as BaseSystemsHealthy
    BaseSystemsHealthy: CAN_DISPLAY
    BaseSystemsHealthy: HACKER_KIOSK
    BaseSystemsHealthy: Teensy
    BaseSystemsHealthy --> ComponentReset: At least 1 component not healthy\nSet FUNCTIONALITY_NONE
    note on link 
        If a base component fails\nit might be best to terminate.
    end note

    BaseSystemsHealthy --> EcusHealthy: Components healthy
    state "ECUs healthy" as EcusHealthy
    EcusHealthy: BESSPIN_TOOL_FREERTOS
    EcusHealthy: FREERTOS_1,2,3

    EcusHealthy --> IsInfotainmentHealthy: Components healthy
    EcusHealthy --> ComponentReset: At least 1 component not healthy\nSet FUNCTIONALITY_MINIMAL

    state "Is Infotainment Healthy?" as IsInfotainmentHealthy
    IsInfotainmentHealthy: INFOTAINMENT_SERVER_1,2,3
    IsInfotainmentHealthy: INFOTAINMENT_THIN_CLIENT
    IsInfotainmentHealthy: DEBIAN_1,2,3
    IsInfotainmentHealthy: BESSPIN_TOOL_DEBIAN
    
    IsInfotainmentHealthy --> ComponentReset: At least 1 component not healthy\nSet FUNCTIONALITY_MEDIUM
    IsInfotainmentHealthy --> HealthCheckComplete: Components healthy\nSet FUNCTIONALITY_FULL

    ComponentReset: Attempt reset of the component(s)
    ComponentReset: Send CAN_ID_CMD_RESTART(COMPONENT_ID)
    ComponentReset: Send CAN_ID_CMD_COMPONENT_ERROR
    
    ComponentReset --> HealthCheckComplete: Reset complete
}
HealthCheck --> IgnitionReady: Health check complete

IgnitionReady --> ActivityCheck: Check activity

state "Check driver activity" as ActivityCheck {
    ActivityCheckStart --> CheckSelfDriveTimer: No activity detected & self_drive_mode
    CheckSelfDriveTimer: Has scenario timer expired? 
    state "Restart Scenario" as ActivityCheckRestartScenario
    ActivityCheckRestartScenario: Restart scenario timer
    CheckSelfDriveTimer --> ActivityCheckRestartScenario: Yes
    ActivityCheckRestartScenario --> ActivityCheckDone: Restart done
    CheckSelfDriveTimer --> ActivityCheckDone: No

    ActivityCheckStart --> DisableSelfDrive: Activity detected & self_drive_mode
    DisableSelfDrive: Disable self-drive mode
    DisableSelfDrive: Disable self-drive scenario timer 
    DisableSelfDrive --> ActivityCheckDone: Done

    ActivityCheckStart --> ActivityCheckDone: Activity detected & !self_drive_mode\n(No change needed)
    ActivityCheckStart --> SwitchToSelfDrive: No activity detected & !self_drive_mode
    SwitchToSelfDrive: Enable self-drive mode
    SwitchToSelfDrive: Start self-drive scenario timer
    SwitchToSelfDrive --> ActivityCheckDone: Done
}

state "Process CMD message" as ProcessCmdMsg {
    
    ProcessCacMsg -[#blue]-> RestartScenario: Rx CMD_RESTART(BEAM_NG)
    state "Restart Scenario" as RestartScenario
    RestartScenario -[#blue]-> CacMsgProcessed: Scenario restarted

    ProcessCacMsg -[#blue]-> ChangeLedSequence: Rx CMD_HACK_ACTIVE(HACK_ID)
    state "Change LED sequence" as ChangeLedSequence
    ChangeLedSequence: change LED sequence through LED manager
    ChangeLedSequence -[#blue]-> CacMsgProcessed: LED sequence changed

    state "Switch CAN network" as SwitchCanNetwork
    ProcessCacMsg -[#blue]-> SwitchCanNetwork: Rx CMD_ACTIVE_SCENARIO(SCENARIO_ID)
    SwitchCanNetwork: Decides which ECU/Infotainment server are active
    SwitchCanNetwork -[#blue]-> CacMsgProcessed: Active CAN selected
}
IgnitionReady -[#blue]-> ProcessCmdMsg: Received CMD message
ProcessCmdMsg -[#blue]-> IgnitionReady

state "Process UDP CAN message" as ProcessUdpCanMsg {
    state "Infotainment Button Pressed" as InfotainmentButtonPressed
    ProcessCanMsg -[#green,dashed]-> InfotainmentButtonPressed: Rx BUTTON_PRESSED\n(Thin Client Network)
    InfotainmentButtonPressed -[#green]-> CanMsgProcessed: Forward BUTTON_PRESSED msg\nto all Infotainment servers
    InfotainmentButtonPressed: NOTE: Always

    state "Infotainment State Updated" as InfotainmentStateUpdated
    ProcessCanMsg -[#green]-> InfotainmentStateUpdated: Rx INFOTAINMENT_STATE
    InfotainmentStateUpdated -[#green,dashed]-> CanMsgProcessed: Forward INFOTAINMENT_STATE msg\nto Thin Client\n(Thin Client Network)
    InfotainmentStateUpdated: NOTE: Always

    state "Update Gear value" as UpdateGear
    ProcessCanMsg -[#green]-> UpdateGear: Rx GEAR
    UpdateGear -[#green]-> CanMsgProcessed: Gear value updated
    UpdateGear: NOTE: Only in manual mode

    state "Update Throttle input" as ThrottleInput
    ProcessCanMsg -[#green]-> ThrottleInput: Rx THROTTLE_INPUT
    ThrottleInput -[#green]-> CanMsgProcessed: Throttle value updated
    ThrottleInput: NOTE: Only in manual mode

    state "Update Brake input" as BrakeInput
    ProcessCanMsg -[#green]-> BrakeInput: Rx BRAKE_INPUT
    BrakeInput -[#green]-> CanMsgProcessed: Brake value updated
    BrakeInput: NOTE: Only in manual mode

    state "Update Steering input" as SteeringInput
    SteeringInput: LKAS
    ProcessCanMsg -[#green]-> SteeringInput: Rx STEERING_INPUT
    SteeringInput -[#green]-> CanMsgProcessed: Steering value updated
    SteeringInput: NOTE: Only in manual mode
}
IgnitionReady -[#green]-> ProcessUdpCanMsg: Received UDP CAN message
ProcessUdpCanMsg -[#green]-> IgnitionReady

IgnitionReady -> IgnitionTerminate: Component failed: : Send\nCMD_COMPONENT_ERROR(IGNITION|ERROR_TYPE)

IgnitionTerminate -> [*]

@enduml
