image: artifactory.galois.com:5008/fett-target:ci
#-----------------------------------------------------------------------------#
#
# General startup commands
#
#-----------------------------------------------------------------------------#
default:
  before_script:
    - . $HOME/.nix-profile/etc/profile.d/nix.sh
    - export PATH=/opt/Xilinx/Vivado/2019.1/bin:/opt/Xilinx/Vivado_Lab/2019.1/bin:$PATH
    - . /opt/Xilinx/Vivado_Lab/2019.1/settings64.sh
    - git submodule update --init

#-----------------------------------------------------------------------------#
#
# Define tags
#
#-----------------------------------------------------------------------------#
.fpga:
  tags: ["docker-fpga"]

.docker:
  tags: ["docker"]

.log_always:
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - workDir/fett.log
      - workDir/*.out

.parallel:
  parallel: 4 # https://xkcd.com/221/

.artifacts:
  artifacts:
    expire_in: 7 days
    when: always
    name: "$CI_COMMIT_REF_SLUG-CI_COMMIT_SHA"

#-----------------------------------------------------------------------------#
#
# Test definitions
#
#-----------------------------------------------------------------------------#
Busybox_on_FPGA:
  timeout: 1h
  script:
    - nix-shell --command "./fett.py -c tests/fpga-busybox.ini -d"
  extends: [.log_always, .fpga]

Push:
  rules:
    - if: "$CI_COMMIT_TAG == null"
  script:
    - nix-shell --command "./ci/fett-ci.py runOnPush \"-push-$CI_COMMIT_SHA\" -i $CI_NODE_INDEX -n $CI_NODE_TOTAL"
  extends: [.log_always, .fpga, .parallel]
  artifacts:
    paths: [./*-push-$CI_COMMIT_SHA]

DevPR:
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
  script:
    - nix-shell --command "./ci/fett-ci.py runDevPR \"-devPR-$CI_COMMIT_SHA\" -i $CI_NODE_INDEX -n $CI_NODE_TOTAL"
  extends: [.log_always, .fpga, .parallel]
  artifacts:
    paths: [./*-devPR-$CI_COMMIT_SHA]

Periodic:
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'schedule'"
  script:
    - nix-shell --command "./ci/fett-ci.py runPeriodic \"-periodic-$CI_COMMIT_SHA\" -i $CI_NODE_INDEX -n $CI_NODE_TOTAL"
  extends: [.log_always, .fpga, .parallel]
  artifacts:
    paths: [./*-periodic-$CI_COMMIT_SHA]

Release:
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'schedule'"
      when: manual
  script:
    - nix-shell --command "./ci/fett-ci.py runRelease \"-release-$CI_COMMIT_SHA\" -i $CI_NODE_INDEX -n $CI_NODE_TOTAL"
  extends: [.log_always, .fpga, .parallel]
  artifacts:
    paths: [./*-release-$CI_COMMIT_SHA]
