# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is the configuration file for fett-target
# User Help: 
# Please fill-in the options as needed then run ./fett.py
# Keep the comments on seperate lines from values. Order of parameters does not matter, but section headers are required.
# Parameters names are case sensitive.
# For bool types, you can use 0/1, False/True, Yes/No [Case insensitive].
# -------Developer Help:
# - To add a new configuration parameter, please edit "base/utils/configData.json" with the 
# description, type, and limits of the argument.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# fett functionality options
[functionality]
mode = test
# [test | production | evaluateSecurityTests | cyberPhys ]
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
#cyberPhys options and config file. This overwrites the `target` section
[cyberPhys]
nTargets = 4
# Number of different targets. Note that the number of sections `[target${i}]` has to match inside the cyberPhys config
interactiveShell = Yes
# Opens the cyberPhys interactive shell. If disabled, the tool will launch the targets then shut them down. 
resetOnWatchdog = Yes
# If a target is detected to be unreachable/down, should we reset(Yes) or exit(No)?
programBitfileOnReset = No
# For vcu118 targets, if resetOnWatchdog is enabled, in case of a reset, should we re-program(Yes) the VCU118 bitfile?
pipeTheUart = No
# In the interactive mode, should we pipe the targets' main tty (UART on vcu118) to a TCP port or not.
# Note that you can pipe selective targets in the interactiveShell using the command `pipe`.
useCustomCyberPhysConfig = No
# Whether to use the default cyberPhys config: $repoDir/cyberPhys.ini, or a custom one.
pathToCustomCyberPhysConfig = /path/to/config
# Path to the custom cyberPhys configuration.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# fett target environment -- NOT LOADED in "cyberPhys" mode
[target]
binarySource = GFE
# [ GFE | LMCO | Michigan | MIT | SRI-Cambridge ]
sourceVariant = default
# [ default | purecap | temporal ]. purecap and temporal are only compatible with SRI-Cambridge.
target = qemu
# [ qemu | vcu118 | awsf1 ]
vcu118Mode = nonPersistent
# [ nonPersistent | flashProgramAndBoot | flashBoot ]. Only applicable if target is set to "vcu118".
# You need to have physical (non-remote) access to the vcu118 board if you choose the flash options.
processor = chisel_p1
# [bluespec_p1, chisel_p1, bluespec_p2, chisel_p2, bluespec_p3, chisel_p3]
osImage = FreeRTOS
# [ debian | FreeRTOS | FreeBSD | busybox(limited) ]
freertosFatFs = default
# Only applicable in 'test' mode and if 'buildApps' is enabled
# [ default (ramdisk for vcu118 and dosblk for awsf1) | ramdisk | dosblk (only on awsf1) | sdcard (only on vcu118) ]
elfLoader = netboot
# [ JTAG | netboot ]
useCustomOsImage = No
# Source of the OS image: If 'No', Nix/FETT-Binaries will be used.
pathToCustomOsImage = /path/to/image
# Path to the osImage in case 'useCustomOsImage' is set to Yes.
useCustomProcessor = No
# Source of the processor files: If 'No', Nix/FETT-Binaries will be used.
pathToCustomProcessorSource = /path/to/source/directory
# Path to a directory with all the files needed (following the structure of FETT-Binaries) to use the custom processor in case 'useCustomProcessor' is set to Yes.
useCustomHwTarget = No
# In a many-board system, use the HW Target specified by "customHWTarget".
# This option has to be consistent among all targets (in case of cyberPhys mode)
customHwTarget = localhost:3121/xilinx_tcf/Digilent/210308XXXXXX
# The HW Target to use if useCustomHwTarget is enabled.
useCustomTargetIp = No
# Use a custom IP address for the target.
# This option has to be consistent among all targets (in case of cyberPhys mode).
customTargetIp = XXX.XXX.XXX.XXX
# The Target IP to use if useCustomTargetIp is enabled.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# fett less important options
[common]
openConsole = No
# returns a console for FreeBSD/debian, and shows the UART output of FreeRTOS while running.
gdbDebug = No
# Detaches from Openocd to allow the user to connect a GDB process to the target.
# "openConsole" has to be enabled. Instructions are printed out with the console.
useCustomCredentials = No
# If 'Yes', create a user with the credentials provided in 'userName' and
# 'userPasswordHash'. If 'No', then the user account will have username
# 'researcher' and password 'fett_2020'.
userName = researcher
# Name of user to create.  Must be 1-14 characters long and may consist only of
# ASCII alphanumeric characters.
userPasswordHash = $6$xcnc07LxM26Xq$VBAn8.ZfCzEf5MEpftSsCndDaxfPs5gXWjdrvrHcSA6O6eRoV5etd9V8E.BE0/q4P8pGOz96Nav3PPuXOktmv.
# Output of crypt(3) in SHA-512 mode with user's password as input
# You can use: `mkpasswd -m sha-512 PASSWORD` on unix
rootUserAccess = No
# If 'Yes', gives user root access via passwordless su on Debian and FreeBSD.
productionTargetIp = 172.31.34.147
# IP address on AWS to bind the FPGA to via a 1:1 NAT
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
[applications]
buildApps = no
# Building only available in test and evaluateSecurityTests modes.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# build settings
[build]
cross-compiler = GCC
# [ GCC | Clang ]
linker = GCC
# [ GCC | LLD ]
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
[evaluateSecurityTests]
vulClasses = [bufferErrors, PPAC, resourceManagement, informationLeakage, numericErrors, hardwareSoC, injection]
# List the vulClasses whose tests are to be executed.
# Choose from: [bufferErrors, PPAC, resourceManagement, informationLeakage, numericErrors, hardwareSoC, injection]
useCustomCWEsConfigsPath = No
# If 'No', then the files in `${repo}/configSecurityTests` will be used by default.
pathToCustomCWEsConfigs = /path/to/directory-containting-configs
# The path to the directory containing the CWEs config files
useCustomScoring = No
# Use the settings in the [customizedScoring] section below. More info is in docs/evaluateSecurityTestsMode.md.
useCustomCompiling = No
# Use the settings in the [customizedCompiling] section below. More info is in docs/evaluateSecurityTestsMode.md.
FreeRTOStimeout = 10
# The FreeRTOS test execution requires a timeout. 10 seconds is a reasonable value.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Scoring Environment -- to be customized for secure processors -- check the testgen readme for more details
[customizedScoring]
stdoutKeywords = []
# List of keywords (comma separated, white spaces) in stdout that means that the processor has detected a violation.
gdbKeywords = []
# List of keywords (comma separated, white spaces) in GDB output that means that the processor has detected a violation.
funcCheckpoints = []
# List of functions/methods/interrupts (comma separated, white spaces) reaching which means that the processor has detected a violation.
memAddress = -1
# The memory address to watch for detected violations. use -1 to disable.
memResetValue = 0
# The value (HEX) to which the tool should reset the memAddress after a violation detection.
memViolationValues = []
# List of values (HEX, comma separated) that indicate that a violation was detected. For example: [0x539, FFF, 1]
# You may use [*] to indicate the use of every value except memResetValue. 
useCustomFunction = No
# Use a custom python script whose main will score instead of the settings above.
pathToCustomFunction = /path/to/python/function
# The path to the python script. It will be passed: 1. A list of the lines from the log file. 2. The Enum object SCORES. 
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Compiling Environment -- to be customized for secure processors -- check the testgen readme for more details
[customizedCompiling]
useCustomMakefile = No
# Use a custom Makefile. This makefile will be copied to the tests directory as 'Makefile', and be executed by 'make'.
pathToCustomMakefile = /path/to/Makefile
# The path to the custom makefile. 
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class: Buffer Errors
[bufferErrors]
useSelfAssessment = No
# Enable to use the CWEsConfigs for the scores instead of running the tests
useCustomErrorModel = No
# Enable this option to use the error model in 'pathToCustomErrorModel', rather
# than the default error model.  This allows for configuration of the types of
# errors the generated tests will exercise.  See 'docs/constrainBufferErrors.md'
# for a detailed description of how to use custom error models.
pathToCustomErrorModel = /path/to/error/model.cfr
# Path to the error model to use when 'useCustomErrorModel' is enabled.
numericTypes = [ints, floats]
# List the numeric types the generated tests should use.
# Choose from [ints, floats]
nTests    = 100
# The number of random tests generated.  Must be at least 40 for FreeRTOS and
# at least 100 for debian and FreeBSD.
useCachedInstances = Yes
# Enable this option to use a cache of all possible enumerations of the builtin
# buffer errors model, rather than generating the enumerations from scratch.
# Enabling this option will save 10's of minutes of runtime of the buffer
# errors tool with no impact on the tool's randomness.  The only reason to
# disable this option is if you have modified the builtin error model
# definition.  Disabling this option will re-generate the cache file, allowing
# you to safely re-enable this option after a single run with a new model
# definition.  This option only applies to the builtin error model and has no
# effect if 'useCustomErrorModel' is enabled.
nSkip     = 0
# Before generating `nTests` tests, generate and throw away `nSkip` tests
useSeed   = No
# Whether to use a specific seed (instead of a random one)
seed      = 0
# The seed for the random generation (if useSeed is enabled)
heapSize  = 8M
stackSize = 8K
# Maximum heap and stack sizes. Understands suffixes K=1024, M=1024^2
useExtraTests = No
# If 'Yes', then look for C files in 'extraSources' to run in addition
# to the generated tests.
extraSources  = /path/to/extra/sources
# Path to directory containing C files to run as additional test cases. Each
# test should be a self-contained C file. The path may be absolute or relative
# to the testgen directory
csvFile = Yes
# tabulates the test results in a CSV file [boolean]
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class: Permission, Privileges and Access Control
[PPAC]
# useSelfAssessment = Yes # Internally enabled -- Self-assessment only.
# Enable to use the CWEsConfigs for the scores instead of running the tests
runAllTests = Yes
# If disabled, then the file ${CWEsConfigs}/PPAC.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class: Resource Management
[resourceManagement]
useSelfAssessment = No
# Enable to use the CWEsConfigs for the scores instead of running the tests
runAllTests = Yes
# If disabled, then the file ${CWEsConfigs}/resourceManagement.ini will be used to custom configure the tests
useSeed = No
# Whether to use a specific seed (instead of a randomly generated one at runtime)
seed = 0
# The seed for the random generation (if `useSeed` is enabled)
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class: Information Leakage
[informationLeakage]
useSelfAssessment = No
# Enable to use the CWEsConfigs for the scores instead of running the tests
runAllTests = Yes
# If disabled, then the file ${CWEsConfigs}/informationLeakage.ini will be used to custom configure the tests
useSeed = No
# Whether to use a specific seed (instead of a randomly generated one at runtime)
seed = 0
# The seed for the random generation (if `useSeed` is enabled)
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class: Numeric Errors
[numericErrors]
useSelfAssessment = No
# Enable to use the CWEsConfigs for the scores instead of running the tests
runAllTests = Yes
# If disabled, then the file ${CWEsConfigs}/numericErrors.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class: Hardware Implementation / SoC
[hardwareSoC]
# useSelfAssessment = Yes # Internally enabled -- Self-assessment only.
# Enable to use the CWEsConfigs for the scores instead of running the tests
runAllTests = Yes
# If disabled, then the file ${CWEsConfigs}/hardwareSoC.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class: Injection
[injection]
useSelfAssessment = No
# Enable to use the CWEsConfigs for the scores instead of running the tests
runAllTests = Yes
# If disabled, then the file ${CWEsConfigs}/injection.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------
