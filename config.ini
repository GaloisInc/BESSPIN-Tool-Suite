# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is the configuration file for fett-target
# User Help: 
# Please fill-in the options as needed then run ./fett.py
# Keep the comments on seperate lines from values. Order of parameters does not matter, but section headers are required.
# Parameters names are case sensitive.
# For bool types, you can use 0/1, False/True, Yes/No [Case insensitive].
# -------Developer Help:
# - To add a new configuration parameter, please edit "base/utils/configData.json" with the 
# description, type, and limits of the argument.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# fett global environment
[backend]
mode = test
# [test | production | evaluateSecurityTests ]
binarySource = GFE
# [ GFE | LMCO | Michigan | MIT | SRI-Cambridge ]
sourceVariant = default
# [ default | purecap | temporal ]. purecap and temporal are only compatible with SRI-Cambridge.
target = qemu
# [ qemu | vcu118 | awsf1 ]
processor = chisel_p1
# [bluespec_p1, chisel_p1, bluespec_p2, chisel_p2, bluespec_p3, chisel_p3]
osImage = FreeRTOS
# [ debian | FreeRTOS | FreeBSD | busybox(limited) ]
FreeRTOSUseRAMDisk = No
# If 'Yes' then use a RAM Disk as the FatFS backing store, otherwise use iceblk
elfLoader = netboot
# [ JTAG | netboot ]
openConsole = No
# returns a console for FreeBSD/debian
useCustomOsImage = No
# Source of the OS image: If 'No', Nix/FETT-Binaries will be used.
pathToCustomOsImage = /path/to/image
# Path to the osImage in case 'useCustomOsImage' is set to Yes.
useCustomProcessor = No
# Source of the processor files: If 'No', Nix/FETT-Binaries will be used.
pathToCustomProcessorSource = /path/to/source/directory
# Path to a directory with all the files needed (following the structure of FETT-Binaries) to use the custom processor in case 'useCustomProcessor' is set to Yes.
netbootPortRangeStart = 5000
netbootPortRangeEnd = 6000
# Which network port to use for netboot.
useCustomCredentials = No
# If 'Yes', create a user with the credentials provided in 'userName' and
# 'userPasswordHash'. If 'No', then the user account will have username
# 'researcher' and password 'fett_2020'.
userName = researcher
# Name of user to create.  Must be 1-14 characters long and may consist only of
# ASCII alphanumeric characters.
userPasswordHash = $6$xcnc07LxM26Xq$VBAn8.ZfCzEf5MEpftSsCndDaxfPs5gXWjdrvrHcSA6O6eRoV5etd9V8E.BE0/q4P8pGOz96Nav3PPuXOktmv.
# Output of crypt(3) in SHA-512 mode with user's password as input
rootUserAccess = No
# If 'Yes', gives user root access via passwordless su on Debian and FreeBSD.
productionTargetIp = 172.31.34.147
# IP address on AWS to bind the FPGA to via a 1:1 NAT

#--------------------------------------------------------------------------------
[applications]
buildApps = no
# Building is only available for test mode.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# build settings
[build]
cross-compiler = GCC
# [ GCC | Clang ]
linker = GCC
# [ GCC | LLD ]

#--------------------------------------------------------------------------------
[evaluateSecurityTests]
vulClasses = [bufferErrors, PPAC, resourceManagement, informationLeakage, numericErrors]
# List the vulClasses whose tests are to be executed.
# Choose from: [bufferErrors, PPAC, resourceManagement, informationLeakage, numericErrors]
useCustomScoring = No
# Use the settings in the [customizedScoring] section below. More info is in docs/evaluateSecurityTestsMode.md.
useCustomCompiling = No
# Use the settings in the [customizedCompiling] section below. More info is in docs/evaluateSecurityTestsMode.md.
FreeRTOStimeout = 10
# The FreeRTOS test execution requires a timeout. 10 seconds is a reasonable value.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Scoring Environment -- to be customized for secure processors -- check the testgen readme for more details
[customizedScoring]
stdoutKeywords = []
# List of keywords (comma separated, white spaces) in stdout that means that the processor has detected a violation.
gdbKeywords = []
# List of keywords (comma separated, white spaces) in GDB output that means that the processor has detected a violation.
funcCheckpoints = []
# List of functions/methods/interrupts (comma separated, white spaces) reaching which means that the processor has detected a violation.
memAddress = -1
# The memory address to watch for detected violations. use -1 to disable.
memResetValue = 0
# The value (HEX) to which the tool should reset the memAddress after a violation detection.
memViolationValues = []
# List of values (HEX, comma separated) that indicate that a violation was detected. For example: [0x539, FFF, 1]
# You may use [*] to indicate the use of every value except memResetValue. 
useCustomFunction = No
# Use a custom python script whose main will score instead of the settings above.
pathToCustomFunction = /path/to/python/function
# The path to the python script. It will be passed: 1. A list of the lines from the log file. 2. The Enum object SCORES. 
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Compiling Environment -- to be customized for secure processors -- check the testgen readme for more details
[customizedCompiling]
useCustomMakefile = No
# Use a custom Makefile. This makefile will be copied to the tests directory as 'Makefile', and be executed by 'make'.
pathToCustomMakefile = /path/to/Makefile
# The path to the custom makefile. 
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #1: Buffer Errors
[bufferErrors]
runAllTests = Yes
# If disabled, then the file ./configSecurityTests/bufferErrors.ini will be used to custom configure the tests
nTests    = 100
# The number of random tests generated [int>0]
nSkip     = 0
# Before generating `nTests` tests, generate and throw away `nSkip` tests
useSeed   = No
# Whether to use a specific seed (instead of a random one)
seed      = 0
# The seed for the random generation (if useSeed is enabled)
heapSize  = 8M
stackSize = 8K
# Maximum heap and stack sizes. Understands suffixes K=1024, M=1024^2
useExtraTests = No
# If 'Yes', then look for C files in 'extraSources' to run in addition
# to the generated tests.
extraSources  = /path/to/extra/sources
# Path to directory containing C files to run as additional test cases. Each
# test should be a self-contained C file. The path may be absolute or relative
# to the testgen directory
csvFile = Yes
# tabulates the test results in a CSV file [boolean]
# POC Exploits OPTIONS ----------------------------------------------------------
poc_heartbleed_real_payload_len = 2
poc_heartbleed_nominal_payload_len = 20
#heartbleed options
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #2: Permission, Privileges and Access Control
[PPAC]
runAllTests = Yes
# If disabled, then the file ./configSecurityTests/PPAC.ini will be used to custom configure the tests
randomizeParameters = No
# If turned on, all parameters starting with the prefix "test_" will be ignored and randomized instead
useSeedForWolfSSL = No
# Whether to use a specific seed (instead ofrandom seeds) for WolfSSL encryption (only on FreeRTOS)
seedForWolfSSL = 0
# The seed for WolfSSL encryption (if useSeed is enabled). 8-bit unsigned integer (0-255).
test_nAllowedAuthAttempts = 3
# for TEST-307: Allowed number of authentication attempts. 10 is an arbitrary limit.
test_nAllowedInteractions = 3
# for TEST-799: Allowed numer of interactions. Note that 9 is a rigid limit (/proc/sys/fs/mqueue/msg_max) to allow +1 breach attempt
# POC Exploits OPTIONS ----------------------------------------------------------
poc_dictionaryAttack_rootPassword = Besspin
# the root password. Should choose a valid star wars planet from (./poc-exploits/2_PPAC/dictionaryAttack/starWarsPlanets.dict), otherwise, the exploit would be meaningless.
poc_dictionaryAttack_usePamTally = No
# If enabled, pam_tally2 is gonna be used which makes the OS secure and blocks the breach.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #3: Resource Management
[resourceManagement]
runAllTests = Yes
# If disabled, then the file ./configSecurityTests/resourceManagement.ini will be used to custom configure the tests
randomizeParameters = No
# If turned on, all parameters starting with the prefix "test_" will be ignored and randomized instead
test_nResourceLimit = 10 
# for test CWE-772: Allowed number of file descriptors per user. (From 5 to 100).
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #4: Code Injection
[codeInjection]
runAllTests = Yes
# If disabled, then the file ./configSecurityTests/codeInjection.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #5: Information Leakage
[informationLeakage]
runAllTests = Yes
# If disabled, then the file ./configSecurityTests/informationLeakage.ini will be used to custom configure the tests
# POC Exploits OPTIONS ----------------------------------------------------------
poc_paddingLeakage_secret = 0x1A2B3C4D
# paddingLeakage option
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #6: Crypto Errors
[cryptoErrors]
runAllTests = Yes
# If disabled, then the file ./configSecurityTests/cryptoErrors.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #7: Numeric Errors
[numericErrors]
runAllTests = Yes
# If disabled, then the file ./configSecurityTests/numericErrors.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------
